# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import re
import shutil
import time

import cv2
import winsound
import yaml
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog

import Rule
import match
import save
import twiceDetect

# 读取yaml配置文件
with open('config.yml', 'r', encoding='utf-8') as y:
    dataInQt5Window2 = yaml.safe_load(y)

templePath = dataInQt5Window2.get('templePath')
videoPath = dataInQt5Window2.get('videoPath')
resultPath = dataInQt5Window2.get('resultPath')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1548, 1093)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMinimumSize(QtCore.QSize(531, 89))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setMinimumSize(QtCore.QSize(531, 89))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setMinimumSize(QtCore.QSize(531, 89))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        self.gridLayout.addLayout(self.horizontalLayout_2, 1, 0, 1, 2)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 2, 0, 1, 2)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setMinimumSize(QtCore.QSize(661, 531))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 3, 0, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setMinimumSize(QtCore.QSize(661, 531))
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 3, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 4, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 4, 1, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setMaximumHeight(300)
        self.gridLayout.addWidget(self.textBrowser, 5, 0, 1, 2)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout.addWidget(self.progressBar, 6, 0, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1548, 37))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pushButton_4.clicked.connect(self.run)
        self.pushButton.clicked.connect(self.selectTempleDir)
        self.pushButton_2.clicked.connect(self.selectVideoFile)
        self.pushButton_3.clicked.connect(self.selectResultDir)
        self.progressBar.setValue(0)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_4.setText(_translate("MainWindow", "运行"))
        self.label.setText(_translate("MainWindow", templePath))
        self.label_2.setText(_translate("MainWindow", videoPath))
        self.label_3.setText(_translate("MainWindow", resultPath))
        self.pushButton.setText(_translate("MainWindow", "选择模板文件夹路径"))
        self.pushButton_2.setText(_translate("MainWindow", "选择视频文件"))
        self.pushButton_3.setText(_translate("MainWindow", "选择保存文件夹路径"))
        self.label_4.setText(_translate("MainWindow", "原视频"))
        self.label_5.setText(_translate("MainWindow", "检测视频"))

    def printf(self, mypstr):
        self.textBrowser.append(mypstr + "\n")  # 在指定的区域显示提示信息
        self.cursor = self.textBrowser.textCursor()
        self.textBrowser.moveCursor(self.cursor.End)  # 光标移到最后，这样就会自动显示出来
        QtWidgets.QApplication.processEvents()  # 一定加上这个功能，不然有卡顿

    def selectTempleDir(self):
        global templePath
        templePath = QFileDialog.getExistingDirectory()
        templePath = str(templePath)
        self.label.setText(templePath)

    def selectVideoFile(self):
        global videoPath
        videoPath = QFileDialog.getOpenFileName()

        videoPath = videoPath[0]
        self.label_2.setText(videoPath)

    def selectResultDir(self):
        global resultPath
        resultPath = QFileDialog.getExistingDirectory()
        resultPath = str(resultPath)
        # self.printf(str(type(resultPath)))
        self.label_3.setText(resultPath)

    def run(self):
        start = time.perf_counter()
        global dataInQt5Window2
        global templePath
        global videoPath
        global resultPath
        self.progressBar.setValue(0)
        if resultPath.isspace() or videoPath.isspace() or templePath.isspace():
            self.printf("路径不能为空")
        self.printf("程序开始运行")

        # 参数 YU_ZHI 当匹配率小于YU_ZHI时视为有意义 数值越高精准度越低 最高为0.99
        # NUM 只有连续NUM帧有意义时才记录帧数  数值越高精准度越高 最低为1
        # LUAN_XU 容错，当后续步骤超过该值时判定乱序  数值越高进准度越低 最低为0
        # 0.95 3 3 时检测步骤1不会出现乱序 当luan_xu低于3时会出现乱序错误
        # 参数 WUCHA 表示当差值低于这个值之后判定在一条线上
        YU_ZHI = dataInQt5Window2.get('YU_ZHI')
        # NUM = dataInQt5Window2.get('NUM')
        LUAN_XU = dataInQt5Window2.get('LUAN_XU')
        WUCHA = dataInQt5Window2.get('WUCHA')
        # ZLX = dataInQt5Window2.get('ZLX')
        # 检测模板图片 模板图片需按正确流程顺序命名 第一个步骤命名为1或temple1
        temples_list = os.listdir(templePath)
        temples_list.sort()

        # 生成保存路径
        i = 1
        savePath = resultPath + "\\" + str(i)
        while os.path.exists(savePath):
            i = i + 1
            savePath = resultPath + "\\" + str(i)
        else:
            os.makedirs(savePath)

            # 生成match保存路径
            matchPath = savePath + "\\match"
            # i = 1
            # matchPath = savePath + "\\" + str(i)
            # while os.path.exists(matchPath):
            #     i = i + 1
            #     matchPath = savePath + "\\" + str(i)
            # else:
            #     os.makedirs(matchPath)

        images_dirs = savePath + "\\" + "iamges"
        os.makedirs(images_dirs)

        re_string = "[0-9]*.jpg"
        r = re.compile(re_string)

        # 记录上一次有意义帧的序号
        frame_temp_list = [0, 0, 0, 0]

        # 暂存步骤执行的帧数 在判断连续执行时使用
        a_temp = 0
        b_temp = 0
        c_temp = 0
        d_temp = 0

        # 记录步骤执行的帧数  a是第一步 b是第二步 c是第三步 d是第四步
        a = 0
        b = 0
        c = 0
        d = 0

        # 标记位，标记是否开始检测
        # judge 为0 启动一次检测程序
        judge = dataInQt5Window2.get('judge')

        # 记录讯息
        message = ''

        # 记录一帧的四个步骤的匹配率
        match_ratio_list = [0.0, 0.0, 0.0, 0.0]

        # 抽帧保存路径
        save_dir = savePath + "\\video2image"

        if os.path.exists(save_dir) is False:
            os.makedirs(save_dir)

        # 抽帧
        cap = cv2.VideoCapture(videoPath)  # 生成读取视频对象
        frames = cap.get(cv2.CAP_PROP_FRAME_COUNT)  # 获取总帧数
        self.printf("视频总帧数为：" + str(frames))
        n = 1  # 计数
        fps = cap.get(cv2.CAP_PROP_FPS)  # 获取视频的帧率
        self.printf("视频帧率为：" + str(fps))
        i = 0
        timeF = int(fps)  # 视频帧计数间隔频率
        # 获取视频宽度
        frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        # 获取视频高度
        frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        photo_size = (frame_width, frame_height)
        videoWriter = cv2.VideoWriter(savePath + '\\result.mp4', cv2.VideoWriter_fourcc('M', 'P', '4', 'V'), fps,
                                      photo_size)
        while cap.isOpened():
            ret, frame = cap.read()  # 按帧读取视频
            # 到视频结尾时终止
            if ret is False:
                break
            # 每隔timeF帧进行存储操作
            # if n % timeF == 0:
            if True:
                i += 1
                print(f'保存第 {i} 张图像')
                save_image_dir = os.path.join(save_dir, '%s.jpg' % i)
                print('save_image_dir: ', save_image_dir)
                cv2.imwrite(save_image_dir, frame)  # 保存视频帧图像

                frame = r.search(save_image_dir).group(0)
                frame = frame[:-4]

                # match 路径
                resultPath4Match = os.path.join(matchPath, frame)

                frame = int(frame)
                img = cv2.imread(save_image_dir, 0)

                # 一切都得从第一个步骤开始
                temple1 = templesPath = os.path.join(templePath, temples_list[0])
                result = match.match(temple1, save_image_dir, resultPath4Match)
                # (1240, 494, 324, 373)

                # cropSize = [(1120, 730, 300, 400), (1750, 500, 500, 700)]  # x y w h
                cropSize = dataInQt5Window2.get('cropSize')
                cropPath = [savePath + '\\crop.jpg',
                            savePath + '\\crop2.jpg']

                img1 = cv2.imread(save_image_dir, -1)  # 保持原格式

                # 匹配率
                matchRatio1 = result[1]

                if judge == 0:
                    if matchRatio1 < YU_ZHI:
                        x, y, w, h = cropSize[0]
                        cropImg = img1[y:y + h, x:x + w]
                        # cv2.imshow('1',cropImg)
                        # cv2.waitKey(0)
                        cv2.imwrite(cropPath[0], cropImg)
                        jieGuo, imgComplete = twiceDetect.detect(cropPath[0])
                        # 手腕与手肘处于水平状态 且手腕在框内 判断执行第一步骤
                        try:
                            if Rule.one(jieGuo[0][4], jieGuo[0][7], jieGuo[0][3], jieGuo[0][6], WUCHA=WUCHA):
                                judge = 1  # 开始二次检测
                        except TypeError:  # 遇到这个异常多半是没有检测到人体
                            pass
                else:
                    for j in range(len(temples_list)):
                        templesPath = os.path.join(templePath, temples_list[j])
                        result = match.match(templesPath, save_image_dir, resultPath4Match)

                        # 第几步骤
                        temple = result[0]

                        # 匹配率
                        matchRatio = result[1]
                        match_ratio_list[temple] = matchRatio

                        # 绘制标注框
                        left_top = result[2]
                        right_below = result[3]
                        font = cv2.FONT_HERSHEY_SIMPLEX
                        cv2.putText(img, str(matchRatio), (left_top[0], left_top[1] - 20,),
                                    font, 1, (255, 255, 0), 2)
                        cv2.rectangle(img, left_top, right_below, (255, 0,), 2)

                        # 匹配率小于阈值
                        # or jq < ZLX
                        if matchRatio < YU_ZHI:
                            # if matchRatio < YU_ZHI:
                            #     jq = 0  # 如果满足条件，刷新jq
                            try:
                                if temple <= 1:
                                    x, y, w, h = cropSize[0]
                                    cropImg = img1[y:y + h, x:x + w]
                                    cv2.imwrite(cropPath[0], cropImg)
                                    jieGuo, imgComplete = twiceDetect.detect(cropPath[0])
                                    img1[y:y + h, x:x + w] = imgComplete
                                else:
                                    x, y, w, h = cropSize[1]
                                    cropImg = img1[y:y + h, x:x + w]
                                    cv2.imwrite(cropPath[1], cropImg)
                                    jieGuo, imgComplete = twiceDetect.detect(cropPath[1])
                                    img1[y:y + h, x:x + w] = imgComplete
                                for jg in jieGuo:
                                    if temple == 0:
                                        if Rule.one(jg, WUCHA=WUCHA):
                                            a += 1

                                    elif temple == 1:
                                        if Rule.two(jg, WUCHA=WUCHA):
                                            b += 1

                                    elif temple == 2:
                                        if Rule.three(jg, WUCHA=WUCHA):
                                            c += 1

                                    elif temple == 3:
                                        if Rule.four(jg, WUCHA=WUCHA):
                                            d += 1
                                    else:
                                        message += '出错！'
                            except TypeError:
                                pass

                            #  判断是否乱序
                            if a == 0 and (b > LUAN_XU or c > LUAN_XU or d > LUAN_XU):
                                message = " 第一个步骤未执行"
                                # break
                            elif b == 0 and (c > LUAN_XU or d > LUAN_XU):
                                message = " 第二个步骤未执行"
                                # break
                            elif c == 0 and (d > LUAN_XU):
                                message = " 第三个步骤未执行"
                                # break
                        else:
                            # 删除文件夹及其内容
                            shutil.rmtree(result[4])
                            if len(os.listdir(resultPath4Match)) == 0:
                                shutil.rmtree(resultPath4Match)
                img_path = images_dirs + "\\" + str(frame) + ".jpg"

                cv2.imwrite(img_path, img1)
                videoWriter.write(img1)
                self.play(save_image_dir)
                self.play2(img_path)

                # self.printf(str(int(i* 100 / frames) ))
                self.progressBar.setValue(int(i * 100 / frames))
            # else:
            #     videoWriter.write(frame)
            # jq = jq + 1
            n = n + 1
            # 不加这一句windows会认为窗口死了，但是明明没运行到这里
            cv2.waitKey(1)  # 延时1ms
        shutil.rmtree(save_dir)
        shutil.rmtree(images_dirs)
        shutil.rmtree(matchPath)

        if len(message) == 0:
            if a == 0:
                message = ' 第一个步骤缺失'
            elif b == 0:
                message = ' 第二个步骤缺失'
            elif c == 0:
                message = ' 第三个步骤缺失'
            elif d == 0:
                message = ' 第四个步骤缺失'
            else:
                message = "流程正确执行"
        videoWriter.release()
        cap.release()  # 释放视频对象
        self.printf("\n文件保存路径:" + str(savePath) + "\n")
        message = message + " 耗时:" + time.strftime("%H:%M:%S", time.gmtime(time.perf_counter() - start))
        self.progressBar.setValue(100)
        # save.save(frames_num=i, a=a, b=b, c=c, d=d, message=message, games_path=matchPath, yu_zhi=YU_ZHI, wu_cha=WUCHA,
        #           luan_xu=LUAN_XU)

        message = '第一个步骤%d,第二个步骤%d，第三个步骤%d，第四个步骤%d \n' % (a, b, c, d) + message
        self.printf(message)

        winsound.Beep(440, 1000)  # 产生持续 1 秒钟的 440 Hz 声音

    def play(self, path):

        pixmap = QPixmap(path)
        self.label_6.setPixmap(pixmap)
        self.label_6.setScaledContents(True)

    def play2(self, path):
        pixmap = QPixmap(path)
        self.label_7.setPixmap(pixmap)
        self.label_7.setScaledContents(True)
